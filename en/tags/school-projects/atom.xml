<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Maxime Letemple - school projects</title>
    <link rel="self" type="application/atom+xml" href="https://mletemple.fr/en/tags/school-projects/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://mletemple.fr"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-05-23T00:00:00+00:00</updated>
    <id>https://mletemple.fr/en/tags/school-projects/atom.xml</id>
    <entry xml:lang="en">
        <title>RISCV-EIRB</title>
        <published>2023-05-23T00:00:00+00:00</published>
        <updated>2023-05-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            Maxime Letemple
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://mletemple.fr/en/blog/riscv-processor/"/>
        <id>https://mletemple.fr/en/blog/riscv-processor/</id>
        
        <content type="html" xml:base="https://mletemple.fr/en/blog/riscv-processor/">&lt;p&gt;My biggest project during my S8 was the implementation of a RV32I RISCV processor on a Nexys A7 FPGA board. I was in a team of six students, and my job was to create test binaries in order to validate each instruction. When the processor was done, I had to set the gcc toolchain to work on our processor.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;more-infos&quot;&gt;More infos&lt;&#x2F;h1&gt;
&lt;p&gt;The code can be found on the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;maxletemple&#x2F;riscv_eirb&quot;&gt;github repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Pokémon Silicium</title>
        <published>2022-12-10T00:00:00+00:00</published>
        <updated>2022-12-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            Maxime Letemple
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://mletemple.fr/en/blog/pokemon-silicium/"/>
        <id>https://mletemple.fr/en/blog/pokemon-silicium/</id>
        
        <content type="html" xml:base="https://mletemple.fr/en/blog/pokemon-silicium/">&lt;p&gt;Pokémon silicium is a simulation of a player versus player pokémon fight on FPGA. The output is a 256*160 display using VGA. The game is controlled by the &lt;a href=&quot;https:&#x2F;&#x2F;digilent.com&#x2F;reference&#x2F;pmod&#x2F;pmodjstk&#x2F;start&quot;&gt;PMOD joystick from Digilent&lt;&#x2F;a&gt;. This was a team project in order to validate my S7 at my engineering school.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;vhdl-implementation&quot;&gt;VHDL implementation&lt;&#x2F;h1&gt;
&lt;p&gt;The description of the architecture is written exclusively in VHDL. We worked as a two person team. My partner wrote the game logic (managing life registers, game loop, type table, etc ...). My job was to convert the serial bus received by the joystick, to send him the inputs in the correct format and to receive informations on the status of the game in order to display them. I had to manage sprite superpostion and transparency, VGA display to create a fluid and viable interface.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;converting-pictures-to-rom&quot;&gt;Converting pictures to ROM&lt;&#x2F;h1&gt;
&lt;p&gt;In order to display sprites, I had to convert .ppm files in a 8 bits ROM written in VHDL. I wrote a programm in C that takes several pictures and convert them in one ROM. It also creates a log file, which is useful when looking for an adress.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;console&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-console &quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span&gt;.&#x2F;a.out img ROM_img.vhd ronflex_back.ppm ronflex_front.ppm mew_back.ppm mew_front.ppm rayquaza_back.ppm rayquaza_front.ppm torterra_back.ppm torterra_front.ppm brasegali_back.ppm brasegali_front.ppm pikachu_back.ppm pikachu_front.ppm ectoplasma_back.ppm ectoplasma_front.ppm tiplouf_back.ppm tiplouf_front.ppm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;more-infos&quot;&gt;More infos&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Resources and project code can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;maxletemple&#x2F;pokemon_silicium&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Download the report &lt;a href=&quot;https:&#x2F;&#x2F;mletemple.fr&#x2F;en&#x2F;blog&#x2F;pokemon-silicium&#x2F;pokemon_silicium.pdf&quot;&gt;here&lt;&#x2F;a&gt; (in french).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
</feed>
